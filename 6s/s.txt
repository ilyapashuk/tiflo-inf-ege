Описанный ниже алгоритм может быть использован для решения задания 6 образца ЕГЭ 2023 года. Данное решение применимо, когда в качестве фигуры даётся какой-либо простой многоугольник (треугольник, параллелограмм, ромб). Варианты, когда дан прямоугольник или квадрат, не рассматриваются, поскольку решение для таких случаев тревиально и уже описано на портале Решу ЕГЭ.

Шаг 1: узнать тип данной фигуры и её параметры.

Для достижения описанной цели мы будем использовать версию исполнителя Черепаха, имеющуюся в стандартной библиотеке языка программирования Python.

Внимание! Для того, чтобы этот исполнитель работал, необходимо, чтобы python был установлен вместе с библиотекой tcltk (модуль tkinter). Для этого при установке Python надо отметить флажок "tcltk и idle".
Если tkinter не установлен, использовать модуль turtle не удастся. Обойти это можно, подключив вместо turtle код из модуля pturtle.py. Там содержится независимая от tkinter частичная имитация исполнителя, которая не может ничего начертить на экране, но может выдать координаты точек. Следует, однако, помнить, что этот фрагмент кода, как и все остальные, необходимо будет запомнить и воспроизвести на экзамене, потратив время.

В файле 1.py приведён код, который строит фигуру из задания без каких-либо дополнительных действий.


Теперь модифицируем код так, как в файле 2.py

Эти три строки, которые мы вписали в тело цикла, заставят систему печатать на консоль координаты каждой точки, в которой побывал исполнитель.

вывод команды в файле log.

Становится очевидно, что дан треугольник.

А ещё мы, не решая никаких планиметрических задач, имеем координаты всех трех вершин этого треугольника.


этап 2: вычисления

В Интернете можно найти следующий вариант уравнения прямой:

\frac{x - x_1}{x_2 - x_1} = \frac{y - y_1}{y_2 - y_1}

преобразуем это к виду:
\frac{x - x_1}{x_2 - x_1} - \frac{y - y_1}{y_2 - y_1} = 0

далее понаблюдаем, как эта вод функция будет вести себя с различными значениями.
для упрощения процидуры я перевёл это в код, всё показано в файле le.py.



по результатам работы этого кода можно предположить, что уравнение в таком виде не только позволяет понять, лежит ли точка на прямой, но и позволяет установить, по какую сторону от прямой лежит данная точка (в одном случае число получается положительное, в другом - отрицательное).

Да простят меня математики за такое вольное обращение с их наукой.



Идём дальше.

теперь напишем функцию, как функция checkpr в файле c.py.


Зная координаты всех трёх вершин треугольника, напишем три функции, которые будут проверять, по какую сторону данная точка лежит от каждой стороны треугольника.
это будут функции c1,c2,c3 в c.py

теперь объединим их функцией cp:


Теперь надо взять какую-то точку, лежащую внутри треугольника, и вычислить для неё эту тройку цифр.
идея в том, что у каждой точки, лежащей внутри треугольника, эта тройка цифр будет совпадать с полученной.
и мы получим функцию, проверяющую, лежит ли точка с указанными координатами внутри треугольника.


при попытке запуска обнаруживаем, что наш код не работает, потому что одна из сторон треугольника параллельна, точнее совпадает, с осью Y, и мы получаем деление на 0.

но так как прямая параллельна OY, для нашей цели достаточно сравнивать у точки координату X, поэтому функцию c1 можно переписать так, как в файле cc.py.

теперь всё работает.

так как одна из вершин находится в точке (8,6; 5) можно предположить, что точка (8,0; 5) лежит внутри треугольника.

cp(8,5)
даёт результат:
(1, -1, -1)

теперь переберём все целые x и y, к примеру, от 0 до 15, и выведем список всех точек, которые теоретически должны лежать в треугольнике (это ccc.py).


список выглядит правдоподобно, поэтому подсчитываем (cnt.py).

Вообще, на этом этапе надо быть очень внимательным: обязательно нужно выполнить этап с выводом координат всех попадающих точек и проверить на предмет наличия таких, которые заведомо не могут лежать внутри фигуры. Если такие точки обнаружились, это указывает, что эталонная точка подобрана неверно.

имеем 38, что совпадает с эталоном.


Внимание! при использовании этого решения надо действовать осмысленно и быть готовым к необходимости подстраивать его под нестандартные условия задачи. Например, если оказывается, что фигура или её часть лежит в отрицательной полуплоскости (какие-то из точек имеют отрицательные координаты), то нужно соответствующим образом скорректировать код, перебирающий координаты точек.